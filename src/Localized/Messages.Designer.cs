//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.PowerShell.Archive.Localized {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Messages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Messages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.PowerShell.Archive.Localized.Messages", typeof(Messages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} was added to the archive..
        /// </summary>
        internal static string AddedItemToArchiveVerboseMessage {
            get {
                return ResourceManager.GetString("AddedItemToArchiveVerboseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive {0} does not exist..
        /// </summary>
        internal static string ArchiveDoesNotExistMessage {
            get {
                return ResourceManager.GetString("ArchiveDoesNotExistMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination path {0} is a directory..
        /// </summary>
        internal static string ArchiveExistsAsDirectoryMessage {
            get {
                return ResourceManager.GetString("ArchiveExistsAsDirectoryMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination path {0} already exists..
        /// </summary>
        internal static string ArchiveExistsMessage {
            get {
                return ResourceManager.GetString("ArchiveExistsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive {0} does not have an extension or an extension that matches the chosen archive format..
        /// </summary>
        internal static string ArchiveExtensionDoesNotMatchArchiveFormatWarning {
            get {
                return ResourceManager.GetString("ArchiveExtensionDoesNotMatchArchiveFormatWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of the archive {0} could not determined by its extension. The zip format is chosen by default..
        /// </summary>
        internal static string ArchiveFormatCouldNotBeDeterminedWarning {
            get {
                return ResourceManager.GetString("ArchiveFormatCouldNotBeDeterminedWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -Format was not specified, so the archive format was determined to be {0} based on its extension..
        /// </summary>
        internal static string ArchiveFormatDeterminedVerboseMessage {
            get {
                return ResourceManager.GetString("ArchiveFormatDeterminedVerboseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive {0} cannot be overwritten because it is a non-empty directory..
        /// </summary>
        internal static string ArchiveIsNonEmptyDirectory {
            get {
                return ResourceManager.GetString("ArchiveIsNonEmptyDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The archive at {0} is read-only..
        /// </summary>
        internal static string ArchiveIsReadOnlyMessage {
            get {
                return ResourceManager.GetString("ArchiveIsReadOnlyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path(s) {0} have been specified more than once..
        /// </summary>
        internal static string DuplicatePathsMessage {
            get {
                return ResourceManager.GetString("DuplicatePathsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are insufficient permissions to access the path {0}..
        /// </summary>
        internal static string InsufficientPermssionsToAccessPathMessage {
            get {
                return ResourceManager.GetString("InsufficientPermssionsToAccessPathMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path(s) {0} are invalid..
        /// </summary>
        internal static string InvalidPathMessage {
            get {
                return ResourceManager.GetString("InvalidPathMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no items to add to the archive..
        /// </summary>
        internal static string NoItemsToAddWarning {
            get {
                return ResourceManager.GetString("NoItemsToAddWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not overwrite the destination path..
        /// </summary>
        internal static string OverwriteDestinationPathFailed {
            get {
                return ResourceManager.GetString("OverwriteDestinationPathFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path {0} could not be found..
        /// </summary>
        internal static string PathNotFoundMessage {
            get {
                return ResourceManager.GetString("PathNotFoundMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path {0} supplied to -LiteralPath is the same as the path supplied to -DestinationPath..
        /// </summary>
        internal static string SameLiteralPathAndDestinationPathMessage {
            get {
                return ResourceManager.GetString("SameLiteralPathAndDestinationPathMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path {0} supplied to -Path is the same as the path supplied to -DestinationPath..
        /// </summary>
        internal static string SamePathAndDestinationPathMessage {
            get {
                return ResourceManager.GetString("SamePathAndDestinationPathMessage", resourceCulture);
            }
        }
    }
}
