name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

trigger: none

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

variables:
  - name: PackageName
    value: 'Microsoft.PowerShell.Archive'
  - name: PackageVersion
    value: ''
  - name: BuildOutDir
    value: ''

stages:
- stage: Build
  displayName: Build module
  pool:
      vmImage: windows-2019
  jobs:
  - job: BuildPkg
    displayName: Build module
    steps:

    - pwsh: |
        & $(Build.SourcesDirectory)\SimpleBuild.ps1
      displayName: Build Microsoft.PowerShell.Archive module
      condition: succeededOrFailed()

    - pwsh: |
        dir "$(BuildOutDir)\*" -Recurse
      displayName: Show BuildOutDirectory

    - pwsh: |
        Install-Module -Name "Pester" -RequiredVersion 4.10.1
        $module = Get-Module -Name "Pester"
        if ($module -ne $null)
        {
          Remove-Module "Pester"
        } 
        Import-Module -Name "Pester" -RequiredVersion 4.10.1
      displayName: Install and Import Pester 4
       
    - pwsh: |
        $OutputFile = "$PWD/build-unit-tests.xml"
        $results = $null
        $results = Invoke-Pester -Script ./Tests/Pester.Commands.Cmdlets.Archive.Tests.ps1 -OutputFile $OutputFile -PassThru -OutputFormat NUnitXml -Show Failed, Context, Describe, Fails
        Write-Host "##vso[artifact.upload containerfolder=testResults;artifactname=testResults]$OutputFile"
        if(!$results -or $results.FailedCount -gt 0 -or !$results.TotalCount)
        {
            throw "Build or tests failed.  Passed: $($results.PassedCount) Failed: $($results.FailedCount) Total: $($results.TotalCount)"
        }
      displayName: Run Build Unit Tests
       
    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/*tests.xml'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '**/*tests.xml'
        testRunTitle: 'Build Unit Tests'
      continueOnError: true
      condition: succeededOrFailed()

    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: "$(BuildOutDir)"
        Build_Repository_Uri: 'https://github.com/PowerShell/Microsoft.PowerShell.Archive'
        PackageName: $(PackageName)
        PackageVersion: $(PackageVersion)

    - pwsh: |
        dir "$(BuildOutDir)\*" -Recurse
      displayName: Show BuildOutDirectory

    - pwsh: |
        $signSrcPath = "$(BuildOutDir)"
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
        $signOutPath = "$(Build.SourcesDirectory)\signed\Microsoft.PowerShell.Archive"
        $null = New-Item -ItemType Directory -Path $signOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
        # Set path variable for guardian codesign validation
        $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Setup variables for signing

    - pwsh: |
        Copy-Item -Path "$(signSrcPath)\*" -Destination "$(signOutPath)"
      displayName: Fake Signing

    - pwsh: |
        Compress-Archive -Path "$(signOutPath)\*" -DestinationPath "$(System.ArtifactsDirectory)\Microsoft.PowerShell.Archive.zip"
      displayName: Create Microsoft.PowerShell.Archive.zip

    - publish: $(System.ArtifactsDirectory)\Microsoft.PowerShell.Archive.zip
      artifact: SignedModule
