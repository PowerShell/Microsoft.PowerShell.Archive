parameters:
  - name: vmImageName
    type: string
    default: 'windows-2019'

  - name: jobName
    type: string
    default: 'run_test_windows'

  - name: jobDisplayName
    type: string
    default: 'Run test'

jobs:
  - job: '${{ parameters.jobName }}'
    pool:
      vmImage: ${{ parameters.vmImageName }}
    displayName: ${{ parameters.jobDisplayName }}
    steps:
      - download: current
        artifact: ModuleBuild

      - pwsh: |
          $url = "https://github.com/PowerShell/PowerShell/releases/download/v7.3.0-preview.6/PowerShell-7.3.0-preview.6-win-x64.zip"
          $isTar = $false
          if ($vmImageName -eq 'macos-latest')
          {
            $url = "https://github.com/PowerShell/PowerShell/releases/download/v7.3.0-preview.6/powershell-7.3.0-preview.6-osx-x64.tar.gz"
            $isTar = $true
          }
          if ($vmImageName -eq 'ubuntu-latest')
          {
            $url = "https://github.com/PowerShell/PowerShell/releases/download/v7.3.0-preview.6/powershell-7.3.0-preview.6-linux-x64.tar.gz"
            $isTar = $true
          }
          $destination = "powershell-preview-archive"
          if ($isTar) {
            $destination += ".tar.gz"
          } else {
            $destination += ".zip"
          }
          Invoke-WebRequest -Uri $url -OutFile $destination
          ## unpack the downloaded file
          $powershellPreview = Join-Path $pwd "powershell-preview"
          mkdir $powershellPreview
          if ($isTar)
          {
            gunzip -d $destination
            $destination = $destination.Replace(".gz", "")
            tar -x -f $destination -C $powershellPreview
          } else {
            Expand-Archive -Path $destination -DestinationPath $powershellPreview
          }
          # Print contents of $powershellPreview
          Get-ChildItem $powershellPreview | Write-Output
          $powershellPreview = Join-Path $powershellPreview "pwsh"
          if ($vmImageName -eq 'windows-latest')
          {
            $powerShellPreview += ".exe"
          }
          # Write the location of PowerShell Preview
          Write-Host "##vso[task.setvariable variable=PowerShellPreviewExecutablePath;]$powershellPreview"
        displayName: Download and Install PowerShell Preview

      - pwsh: |
          .($(PowerShellPreviewExecutablePath)) .azdevops/RunTests.ps1        
        displayName: Run Tests
        
      - task: PublishTestResults@2
        displayName: 'Publish Test Results **/*tests.xml'
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: '**/*tests.xml'
          testRunTitle: 'Build Unit Tests'
        continueOnError: true
        condition: succeededOrFailed()